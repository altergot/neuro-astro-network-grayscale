function [Ca, Iapp, V_line] = simulate_model(model,m_weight, params, is_test)

if is_test
    n = params.n_test;
    t = fix((params.test_start_Ca - params.t_start_stim) / params.step);
    Ca = shiftdim(m_weight.Ca(:,:,t:end));
else
    n = params.n_training;
    Ca = zeros(params.mastro, params.nastro, n);
end

for i = 1 : n
    if rem(i, 1000) == 0
        disp([i, n]);
    end
    
    [model.V_line(:,i + 1), ...
        model.U_line(:,1), ...
        model.G(:,1), ...
        model.Isyn_line] = ...
        step_neurons(model.V_line(:,i), ...
        model.U_line(:,1), ...
        model.G(:,1), ...
        model.T_Iapp_met(i), ...
        model.Iapp, ...
        model.Isyn_line, ...
        m_weight.Post, ...
        m_weight.Pre, ...
        m_weight.weight, ...
        Ca(:,:,i),...
        model.Iastro_neuron_line,...
        is_test);
    
    [model.neuron_astrozone_activity] = ...
        get_neuron_astrozone_activity(model.G(:,1));
    
    if ~is_test
        [model.Ca(:,:,i+1), ...
            model.H(:,:,1), ...
            model.IP3(:,:,1)] = ...
            step_astrocytes(model.neuron_astrozone_activity(:,:,1), ...
            model.Ca(:,:,i), ...
            model.H(:,:,1), ...
            model.IP3(:,:,1));
    else
        [model.Iastro_neuron_line(:,1), ...
            model.Iastro_neuron] = ...
            expand_astrocytes(Ca(:,:,i), ...
            model.Iastro_neuron, model.neuron_astrozone_activity, i);
    end
end

if is_test
    V_line = shiftdim(model.V_line(:,model.T_Iapp(1,1):model.T_Iapp(1,1)+ ...
        params.after_sample_frames_test));
else
    V_line = shiftdim(model.V_line(:,model.T_Iapp(1,1):model.T_Iapp(1,2)));
end

if is_test
    Ca = m_weight.Ca;
else
    Ca = model.Ca;
end

Iapp = model.Iapp;
end